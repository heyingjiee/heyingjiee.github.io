import{_ as a,c as n,a2 as i,o as p}from"./chunks/framework.CQii86iU.js";const b=JSON.parse('{"title":"前端脚手架","description":"","frontmatter":{},"headers":[],"relativePath":"docs/frontBasic/前端脚手架.md","filePath":"docs/frontBasic/前端脚手架.md","lastUpdated":1733071258000}'),e={name:"docs/frontBasic/前端脚手架.md"};function l(t,s,r,h,k,c){return p(),n("div",null,s[0]||(s[0]=[i(`<h1 id="前端脚手架" tabindex="-1">前端脚手架 <a class="header-anchor" href="#前端脚手架" aria-label="Permalink to &quot;前端脚手架&quot;">​</a></h1><h2 id="_2-种方式" tabindex="-1">2 种方式 <a class="header-anchor" href="#_2-种方式" aria-label="Permalink to &quot;2 种方式&quot;">​</a></h2><ul><li><p>全局安装 npm 包后，全局可执行命令。例如：eslint</p><p>npm配置 bin 字段，当安装后会自动在环境变量中添加命令 xxx</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cli&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//包名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//包的描述</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//包的版本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//配置命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./yyy.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>由于调用的是 JS 文件，一般在第一行执行使用 node 作为解释器</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p><code>#!</code>是Linux和Unix以及各种脚本中出现在文件最开头的序列。当它出现在文本文件的第一行时，类Unix操作系统的程序加载器会分析<code>#!</code>后的内容，<strong>将这些内容作为解释器指令，并调用对应的解释器来执行脚本</strong>。</p><p>使用解释器，在不同机器可能安装在不同的目录下，系统如何知道要去哪里找你的解释程序呢？ <code>/usr/bin/env</code>就是告诉系统可以在<code>PATH</code>目录中查找。 所以配置<code>#!/usr/bin/env node</code>, 就是解决了<strong>不同的用户node路径不同的问题，可以让系统动态的去查找node来执行你的脚本文件</strong></p></blockquote></li><li><p>不安装npm包直接执行命令</p><p>例如：使用vite创建项目命令如下</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project-name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这是一种约定的写法，其实际命令如下</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project-name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="基本流程" tabindex="-1">基本流程 <a class="header-anchor" href="#基本流程" aria-label="Permalink to &quot;基本流程&quot;">​</a></h2><p>1、初始化npm包</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、实现脚手架</p><ul><li><p>配置package.json的bin字段</p></li><li><p>实现bin指向的JS文件 （里面是核心逻辑，即解析命令，实现逻辑）</p><p>一般必须实现：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-v 输出版本信息</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-h 帮助信息</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1、给 CLI 生成艺术字：https://tooltt.com/art-ascii/</span></span>
<span class="line"><span>2、一般格式 Usage、Commands、Options</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Usage:</span></span>
<span class="line"><span>  xxx command [options] &lt;params&gt; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>Commands:</span></span>
<span class="line"><span>  [root]           start dev server</span></span>
<span class="line"><span>  build [root]     build for production</span></span>
<span class="line"><span>  optimize [root]  pre-bundle dependencies</span></span>
<span class="line"><span>  preview [root]   locally preview production build</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 格外的介绍可以没有</span></span>
<span class="line"><span>For more info, run any command with the \`--help\` flag:</span></span>
<span class="line"><span>  $ vite --help</span></span>
<span class="line"><span>  $ vite build --help</span></span>
<span class="line"><span>  $ vite optimize --help</span></span>
<span class="line"><span>  $ vite preview --help</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>  --host [host]           [string] specify hostname </span></span>
<span class="line"><span>  --port &lt;port&gt;           [number] specify port </span></span>
<span class="line"><span>  --https                 [boolean] use TLS + HTTP/2 </span></span>
<span class="line"><span>  --open [path]           [boolean | string] open browser on startup </span></span>
<span class="line"><span>  --cors                  [boolean] enable CORS </span></span>
<span class="line"><span>  --strictPort            [boolean] exit if specified port is already in use </span></span>
<span class="line"><span>  --force                 [boolean] force the optimizer to ignore the cache and re-bundle </span></span>
<span class="line"><span>  -c, --config &lt;file&gt;     [string] use specified config file </span></span>
<span class="line"><span>  --base &lt;path&gt;           [string] public base path (default: /) </span></span>
<span class="line"><span>  -l, --logLevel &lt;level&gt;  [string] info | warn | error | silent </span></span>
<span class="line"><span>  --clearScreen           [boolean] allow/disable clear screen when logging </span></span>
<span class="line"><span>  -d, --debug [feat]      [string | boolean] show debug logs </span></span>
<span class="line"><span>  -f, --filter &lt;filter&gt;   [string] filter debug logs </span></span>
<span class="line"><span>  -m, --mode &lt;mode&gt;       [string] set env mode </span></span>
<span class="line"><span>  -h, --help              Display this message </span></span>
<span class="line"><span>  -v, --version           Display version number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div></li></ul><p>3、发布npm包</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如果发布到私服，记得切换源</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="npm调试原理" tabindex="-1">npm调试原理 <a class="header-anchor" href="#npm调试原理" aria-label="Permalink to &quot;npm调试原理&quot;">​</a></h2><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 在npm项目根目录下执行，把这个项目作为一个包链接到全局node 的 node_modules下。这就使得本地项目可以不发布而安装在全局使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unlink</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 也是在npm项目根目录下执行，把这个项目从全局 node_modules下移除</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ⚠️：npm link 将包安装到全局，可以直接执行 bin字段指定的命令。但是其他项目内安装这个包，还需要下面命令</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 在npm项目根目录下执行，将项目的package.json 下的依赖指向package-name这个包。 项目下出现node_module目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unlink</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 在npm项目根目录下执行，取消链接</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="单包调试" tabindex="-1">单包调试 <a class="header-anchor" href="#单包调试" aria-label="Permalink to &quot;单包调试&quot;">​</a></h3><p>单包：项目根目录包含package.json，是一个npm包项目</p><p>创建脚手架项目后，不用发布。注意：<strong>在项目目录下</strong>执行<code>npm link</code>，就会自动在node/bin下创建软连接指向项目（只要 node 配置上环境变量了，项目的命令就能在全局执行，相当于-g安装）</p><p>这样调试项目时，改动代码，执行脚手架能跟随变化</p><h3 id="多包调试" tabindex="-1">多包调试 <a class="header-anchor" href="#多包调试" aria-label="Permalink to &quot;多包调试&quot;">​</a></h3><p>项目下有两个包 abc、bcd-lib。其中abc是实现CLI命令，其依赖bcd-lib导出的函数。如何在不发布 bcd-lib 的情况下，调试abc包？</p><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Essay/20241009005120DJorfS.png" alt="image-20241009005120051"></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#【 bcd-lib 目录下 】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 把这个包链接到全局node 的 node_modules下，作为一个包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;name&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bcd-lib&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;version&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0.0&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;main&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lib/index.js&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 导出函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># lib/index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module.exports</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">={</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sum(a,b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a+b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 【 abc 目录下 】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 把自己链接到全局，就可使用bin 下配置的 CLI 命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npm i bcd-lib  ⚠️ 直接安装会从官方源查找这个包，肯定找不到。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bcd-lib</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 把bcd-lib链接到自己目录下。⚠️abc 下会出现 node_module目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 手动到 package.json 中添加依赖</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;name&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mini-demo&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;version&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0.0&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;bin&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;abc&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;bin/abc.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;dependencies&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;bcd-lib&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^1.0.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 手动添加依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># bin/abc.js中可以使用未发布的包了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bcd=require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;bcd-lib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">console.log(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;acb脚本 --&gt;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,bcd.sum(1,2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>调试完毕发布 abc、bcd-lib</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 手动进入 abc、bcd-lib</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>发布 bcd-lib后，如何让abc依赖远程包？</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 【 bcd-lib 目录下 】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unlink</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 全局取消安装</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 【 abc 目录下 】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node_modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bcd-lib</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # abc项目取消安装 bcd-lib （必须先移除，否则npm i bcd-lib安装不上）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bcd-lib</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 远程安装bcd-lib</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="monorepo方案" tabindex="-1">Monorepo方案 <a class="header-anchor" href="#monorepo方案" aria-label="Permalink to &quot;Monorepo方案&quot;">​</a></h2><p>前面提到的，两个包的开发、发布过程是十分复杂的</p><p>早期大多数项目使用Lerna进行多包管理，学习Lerna可以参考：<a href="https://juejin.cn/post/7328619739546107913" target="_blank" rel="noreferrer">2024 重学lerna 8.x（1万字）</a></p><p>目前，Lerna 8.x已经将多包管理能力交个包管理器来做了，例如pnpm已经实现了多包管理的能力</p><h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h3><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pnpm-workspace.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">packages:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;packages/*&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 子包都放在packages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="子包" tabindex="-1">子包 <a class="header-anchor" href="#子包" aria-label="Permalink to &quot;子包&quot;">​</a></h3><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建子包</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 修改 package.json的 name 字段 @hdd-cli-template/core （为了防止包名冲突一般放在组织名下）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>npm 上创建组织@hdd-cli-template流程：</p><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Essay/20241015224627YwhLaw.png" alt="image-20241015224627825"></p><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Essay/20241015224729ROMxah.png" alt="image-20241015224729533"></p><p>注意：下一步邀请用户直接跳过就行</p><h3 id="依赖管理" tabindex="-1">依赖管理 <a class="header-anchor" href="#依赖管理" aria-label="Permalink to &quot;依赖管理&quot;">​</a></h3><p>pnpm配置（参考：<a href="https://ksh7.com/posts/pnpm-use-workspace/index.html#%E5%AE%89%E8%A3%85%E5%86%85%E9%83%A8-workspace-%E4%BE%9D%E8%B5%96%EF%BC%89" target="_blank" rel="noreferrer">https://ksh7.com/posts/pnpm-use-workspace/index.html#安装内部-workspace-依赖）</a></p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .npmrc  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pnpm 9.x 之后，下面属性默认 false，表示所有包从 npm 源下载。如果需要安装本地依赖应该设为 true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者安装依赖本地时 增加 --workspace 选项</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">link-workspace-packages = true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>pnpm包管理</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 公共选项</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -w (注意-w 是 --workspace-root 的简写) 表示在工作区执行 ，即pnpm-lock.yaml 所在的目录，不指定执行范围的默认值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --filter &lt;package-name&gt; 表示选中包下执行 ； </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -r 所有子包。例如 ： pnpm run script命令 -r  #所有子包执行该命令</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @hdd-cli-template/utils</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 进入core子包目录.--workspace表示不从 npm 下载，而是从工作区查找依赖。安装本地的版本，使用的是特殊的标记 &quot;xxx&quot;: &quot;workspace:1.0.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @hdd-cli-template/utils</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 进入core子包目录</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="全局包" tabindex="-1">全局包 <a class="header-anchor" href="#全局包" aria-label="Permalink to &quot;全局包&quot;">​</a></h3><p>如果某个子包配置了bin字段，如何把本地包安装到全局</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 文档写的，但是没用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 用npm的link 是生效的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="发布管理" tabindex="-1">发布管理 <a class="header-anchor" href="#发布管理" aria-label="Permalink to &quot;发布管理&quot;">​</a></h3><p><strong>pnpm官方提供的方案</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Dw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @changesets/cli</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 初始化changeset （创建.changeset文件夹，其中config.json可以配置changeset）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 选择哪些包、选择是 major、minor、patch 哪种升级、写 summary（会加到所有选择的包的 CHANGELOG 中）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意：升级的版本号、summary都是应用到第一步选择的包上</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在.changeset 下生成记录升级信息的 md 文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 空格选择，回车确认。不选择直接回车就是跳过</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Essay/202410191110186LXrNN.png" alt="image-20241019111018059"></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 利用上一步用来记录信息的 md 文件，在发布的子包下生成CHANGELOG信息。最后删除 md 文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 发布全部子包（必须 commit 所有改动）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>⚠️：发布到npm需要先设置源并登录</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置npm源，并登录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmjs.org/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 发布后</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  如果依赖了本地包，即&quot;xxx&quot;: &quot;workspace:^&quot; ，pnpm发布的到线上的包会替换为具体的依赖版本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>官方还提供了通过 Github Action 发布npm包的方式：<a href="https://www.pnpm.cn/using-changesets" target="_blank" rel="noreferrer">https://www.pnpm.cn/using-changesets</a></p><p>补充一种场景：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>A@1.0.0 包依赖 B@1.0.0 包</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* A升级为 1.1.0，依然依赖 B@1.0.0</span></span>
<span class="line"><span>* B升级为 2.0.0，最后会发现A 包也被升级，即A@1.0.1且依赖B@2.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="脚手架" tabindex="-1">脚手架 <a class="header-anchor" href="#脚手架" aria-label="Permalink to &quot;脚手架&quot;">​</a></h2><h3 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h3><p>参考Lerna架构</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>｜- core # 核心层：用于核心流程处理</span></span>
<span class="line"><span>｜- commands # 命令层：脚手架核心命令</span></span>
<span class="line"><span>	｜- 版本信息</span></span>
<span class="line"><span>	｜- 初始化</span></span>
<span class="line"><span>	｜- 发布</span></span>
<span class="line"><span>	｜- 清除缓存</span></span>
<span class="line"><span>｜- models # 模型层</span></span>
<span class="line"><span>	｜- Command 命令</span></span>
<span class="line"><span>	｜- Project 项目</span></span>
<span class="line"><span>	｜- Component 组件</span></span>
<span class="line"><span>	｜- NPM 模块</span></span>
<span class="line"><span>	｜- Git 模块</span></span>
<span class="line"><span>｜-utils # 工具支撑层</span></span>
<span class="line"><span>	｜- 云构建</span></span>
<span class="line"><span>	｜- 工具方法</span></span>
<span class="line"><span>	｜- Component 组件</span></span>
<span class="line"><span>	｜- HTTP API 请求</span></span>
<span class="line"><span>	｜- Git API</span></span>
<span class="line"><span>｜- docs 文档</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="三方工具" tabindex="-1">三方工具 <a class="header-anchor" href="#三方工具" aria-label="Permalink to &quot;三方工具&quot;">​</a></h3><p>核心工具</p><p><a href="https://www.npmjs.com/package/minimist" target="_blank" rel="noreferrer">minimist</a>：解析命令和参数</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcommander" target="_blank" rel="noreferrer">commander</a>：JS方式编写命令</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Finquirer" target="_blank" rel="noreferrer">inquirer</a>：常见交互式命令行用户界面的集合</p><p>辅助工具</p><p><a href="https://www.npmjs.com/package/@lerna-lite/npmlog" target="_blank" rel="noreferrer">@lerna-lite/npmlog</a> :日志库</p><p><a href="https://www.npmjs.com/package/semver" target="_blank" rel="noreferrer">semver</a>：版本号检验</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fdownload-git-repo" target="_blank" rel="noreferrer">download-git-repo</a>：下载并提取git仓库</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fshelljs" target="_blank" rel="noreferrer">shelljs</a>：基于 Node.js API 的 Unix shell 命令的可移植**(Windows/Linux/OS X)实现**</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ffs-extra" target="_blank" rel="noreferrer">fs-extra</a>：fs的扩展，提供了非常多的便利API，并且继承了fs所有方法和为fs方法添加了promise的支持</p><p><a href="https://www.npmjs.com/package/root-check" target="_blank" rel="noreferrer">root-check</a> ：root权限检查</p><p>美化工具</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fchalk" target="_blank" rel="noreferrer">chalk</a>：美化终端输出，提供了多种终端输出颜色选择</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ffiglet" target="_blank" rel="noreferrer">figlet</a>：终端标题美化</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fora" target="_blank" rel="noreferrer">ora</a>：终端显示下载动画</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ftable" target="_blank" rel="noreferrer">table</a>：在终端用表格形式展示数据</p><h3 id="core" tabindex="-1">core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;core&quot;">​</a></h3><p><strong>准备阶段</strong> --&gt; <strong>命令注册</strong> --&gt; <strong>命令执行</strong></p><p>⚠️</p><p>检查root启动：如果在root用户下脚手架创建的文件，可能会出现其他用户无权限操作的情况</p><p>检查用户主目录：脚手架产生的数据一般放在 <code>Home/ .xxx</code> 目录下</p><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Essay/202410192313092l90gp.png" alt="image-20241019231309117"></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://juejin.cn/post/7363607004348989479" target="_blank" rel="noreferrer">https://juejin.cn/post/7363607004348989479</a></p><p><a href="https://juejin.cn/post/7328619739546107913" target="_blank" rel="noreferrer">https://juejin.cn/post/7328619739546107913</a></p>`,86)]))}const o=a(e,[["render",l]]);export{b as __pageData,o as default};
